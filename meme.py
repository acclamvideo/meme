from requests import post
from threading import Thread, Lock
from os import system as sys
from platform import system as s_name
from time import sleep
from random import randint, uniform
from colorama import Fore
from typing import Literal
from datetime import datetime, timedelta
from json import loads
from urllib.parse import unquote
from itertools import cycle

from Core.Tools.HPV_Getting_File_Paths import HPV_Get_Accounts
from Core.Tools.HPV_Proxy import HPV_Proxy_Checker
from Core.Tools.HPV_User_Agent import HPV_User_Agent

from Core.Config.HPV_Config import *







class HPV_MemeFi:
    '''
    AutoBot Ferma /// HPV
    ---------------------
    [1] - `–£–ª—É—á—à–µ–Ω–∏–µ –±—É—Å—Ç–æ–≤`
        [1.1] - `–ü–æ–ø—ã—Ç–∫–∞ —É–ª—É—á—à–∏—Ç—å –±—É—Å—Ç 'Damage' (—É—Ä–æ–Ω –∑–∞ –æ–¥–∏–Ω —Ç–∞–ø)`
        
        [1.2] - `–ü–æ–ø—ã—Ç–∫–∞ —É–ª—É—á—à–∏—Ç—å –±—É—Å—Ç 'EnergyCap' (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ë–º–∫–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏)`
        
        [1.3] - `–ü–æ–ø—ã—Ç–∫–∞ —É–ª—É—á—à–∏—Ç—å –±—É—Å—Ç 'EnergyRechargeRate' (—Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏)`
        
        
    [2] - `–ü–æ–ø—ã—Ç–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Å—Å–∞`
    
    
    [3] - `–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å TapBot`
        [3.1] - `–ï—Å–ª–∏ TapBot —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω - –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–±–æ—Ä –º–æ–Ω–µ—Ç –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞`
            [3.1.1] - `–°–±–æ—Ä –º–æ–Ω–µ—Ç, —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é TapBota`
            
            [3.1.2] - `–ó–∞–ø—É—Å–∫ TapBota`
            
            [3.1.3] - `–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 3 –¥–æ 4 —á–∞—Å–æ–≤`
            
            [3.1.4] - `–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π 3 —Ä–∞–∑–∞ —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–µ 3-4 —á–∞—Å–æ–≤`
            
        [3.2] - `–ï—Å–ª–∏ TapBot –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –µ–≥–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ`
            [3.2.1] - `–ü–æ–∫—É–ø–∫–∞ TapBot`
    
            
    [4] - `–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 5 –¥–æ 6 —á–∞—Å–æ–≤`
    
    
    [5] - `–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ 5-6 —á–∞—Å–æ–≤`
    '''



    def __init__(self, Name: str, URL: str, Proxy: dict) -> None:
        self.Domain = 'https://api-gw-tg.memefi.club/graphql' # –î–æ–º–µ–Ω –∏–≥—Ä—ã
        self.Name = Name                     # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
        self.URL = URL                       # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ mini app
        self.Proxy = Proxy                   # –ü—Ä–æ–∫—Å–∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)
        self.UA = HPV_User_Agent()           # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ User Agent
        self.Token = self.Authentication()   # –¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞



    def URL_Clean(self, URL: str) -> str:
        '''–û—á–∏—Å—Ç–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤'''

        try:
            return unquote(URL.split('#tgWebAppData=')[1].split('&tgWebAppVersion')[0])
        except:
            return ''



    def Current_Time(self) -> str:
        '''–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è'''

        return Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'



    def Logging(self, Type: Literal['Success', 'Warning', 'Error'], Name: str, Smile: str, Text: str) -> None:
        '''–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'''

        with Console_Lock:
            COLOR = Fore.GREEN if Type == 'Success' else Fore.YELLOW if Type == 'Warning' else Fore.RED # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            DIVIDER = Fore.BLACK + ' | '   # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

            Time = self.Current_Time()     # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            Name = Fore.MAGENTA + Name     # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
            Smile = COLOR + str(Smile)     # –°–º–∞–π–ª–∏–∫
            Text = COLOR + Text            # –¢–µ–∫—Å—Ç –ª–æ–≥–∞

            print(Time + DIVIDER + Smile + DIVIDER + Text + DIVIDER + Name)



    def Authentication(self) -> str:
        '''–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞'''

        URL = unquote(unquote(unquote(self.URL.split('#tgWebAppData=')[1].split('&tgWebAppVersion')[0]))).split('&')

        _query_id = URL[0].split('=')[1]
        _user = loads(URL[1].split('=')[1])
        _user_str = URL[1].split('=')[1]
        _auth_date = URL[2].split('=')[1]
        _hash = URL[3].split('=')[1]

        try:username = _user['username']
        except:username = ''

        Headers = {'User-Agent': self.UA, 'Content-Type': 'application/json', 'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'sec-ch-ua-mobile': '?1', 'sec-ch-ua-platform': '"Android"', 'origin': 'https://tg-app.memefi.club', 'x-requested-with': 'org.telegram.messenger', 'sec-fetch-site': 'same-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'referer': 'https://tg-app.memefi.club/', 'accept-language': 'ru,ru-RU;q=0.9,en-US;q=0.8,en;q=0.7'}
        Json = {'operationName': 'MutationTelegramUserLogin', 'variables': {'webAppData': {'auth_date': int(_auth_date), 'hash': _hash, 'query_id': _query_id, 'checkDataString': 'auth_date=' + _auth_date + '\nquery_id=' + _query_id + '\nuser=' + _user_str, 'user': {'id': _user['id'], 'allows_write_to_pm': True, 'first_name': _user['first_name'], 'last_name': _user['last_name'], 'username': username, 'language_code': _user['language_code'], 'version': '7.4', 'platform': 'android'}}}, 'query': 'mutation MutationTelegramUserLogin($webAppData: TelegramWebAppDataInput!) {\n  telegramUserLogin(webAppData: $webAppData) {\n    access_token\n    __typename\n  }\n}'}

        try:
            Token = post(self.Domain, headers=Headers, json=Json, proxies=self.Proxy).json()['data']['telegramUserLogin']['access_token']
            self.Logging('Success', self.Name, 'üü¢', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
            return Token
        except:
            self.Logging('Error', self.Name, 'üî¥', '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!')
            return ''



    def ReAuthentication(self) -> None:
        '''–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞'''

        self.Token = self.Authentication()



    def Get_Info(self) -> dict:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ'''

        Headers = {'authority': 'api-gw-tg.memefi.club', 'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'content-type': 'application/json', 'origin': 'https://tg-app.memefi.club', 'referer': 'https://tg-app.memefi.club/', 'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "YaBrowser";v="24.4", "Yowser";v="2.5"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA}
        Json = {'operationName': 'QUERY_GAME_CONFIG', 'variables': {}, 'query': 'query QUERY_GAME_CONFIG {\n  telegramGameGetConfig {\n    ...FragmentBossFightConfig\n    __typename\n  }\n}\n\nfragment FragmentBossFightConfig on TelegramGameConfigOutput {\n  _id\n  coinsAmount\n  currentEnergy\n  maxEnergy\n  weaponLevel\n  zonesCount\n  tapsReward\n  energyLimitLevel\n  energyRechargeLevel\n  tapBotLevel\n  currentBoss {\n    _id\n    level\n    currentHealth\n    maxHealth\n    __typename\n  }\n  freeBoosts {\n    _id\n    currentTurboAmount\n    maxTurboAmount\n    turboLastActivatedAt\n    turboAmountLastRechargeDate\n    currentRefillEnergyAmount\n    maxRefillEnergyAmount\n    refillEnergyLastActivatedAt\n    refillEnergyAmountLastRechargeDate\n    __typename\n  }\n  bonusLeaderDamageEndAt\n  bonusLeaderDamageStartAt\n  bonusLeaderDamageMultiplier\n  nonce\n  __typename\n}'}

        try:
            HPV = post(self.Domain, headers=Headers, json=Json, proxies=self.Proxy).json()['data']['telegramGameGetConfig']

            Balance = f'{HPV["coinsAmount"]:,}' # –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å

            Current_Energy = HPV['currentEnergy'] # –¢–µ–∫—É—â–∞—è —ç–Ω–µ—Ä–≥–∏—è
            Max_Energy = HPV['maxEnergy'] # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è
            Bot = HPV['tapBotLevel'] # –ù–∞–ª–∏—á–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞
            Tap_LVL = HPV['weaponLevel'] + 1 # –£—Ä–æ–≤–µ–Ω—å —Ç–∞–ø–∞
            Max_Energy_LVL = HPV['energyLimitLevel'] + 1 # –£—Ä–æ–≤–µ–Ω—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
            Recovery_Rate_LVL = HPV['energyRechargeLevel'] + 1 # –£—Ä–æ–≤–µ–Ω—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

            Boss_LVL = HPV['currentBoss']['level'] # –£—Ä–æ–≤–µ–Ω—å –±–æ—Å—Å–∞
            Boss_Health = HPV['currentBoss']['currentHealth'] # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Å—Å–∞

            Turbo = HPV['freeBoosts']['currentTurboAmount'] # –ö–æ–ª-–≤–æ –±—É—Å—Ç–æ–≤ "Turbo"
            Recharge = HPV['freeBoosts']['currentRefillEnergyAmount'] # –ö–æ–ª-–≤–æ –±—É—Å—Ç–æ–≤ "Recharge"

            return {'Balance': Balance, 'Current_Energy': Current_Energy, 'Max_Energy': Max_Energy, 'Bot': Bot, 'Tap_LVL': Tap_LVL, 'Max_Energy_LVL': Max_Energy_LVL, 'Recovery_Rate_LVL': Recovery_Rate_LVL, 'Boss_LVL': Boss_LVL, 'Boss_Health': Boss_Health, 'Turbo': Turbo, 'Recharge': Recharge}
        except:
            return None



    def Get_Bots(self) -> int:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ—Ç–æ–≤'''

        URL = 'https://api-gw-tg.memefi.club/graphql'
        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'content-type': 'application/json', 'origin': 'https://tg-app.memefi.club', 'priority': 'u=1, i', 'referer': 'https://tg-app.memefi.club/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA}
        Json = {'operationName': 'TapbotConfig', 'variables': {}, 'query': 'fragment FragmentTapBotConfig on TelegramGameTapbotOutput {\n  damagePerSec\n  endsAt\n  id\n  isPurchased\n  startsAt\n  totalAttempts\n  usedAttempts\n  __typename\n}\n\nquery TapbotConfig {\n  telegramGameTapbotGetConfig {\n    ...FragmentTapBotConfig\n    __typename\n  }\n}'}

        try:
            return 3 - post(URL, headers=Headers, json=Json, proxies=self.Proxy).json()['data']['telegramGameTapbotGetConfig']['usedAttempts']
        except:
            return 0



    def Buy_TapBot(self) -> None:
        '''–ü–æ–∫—É–ø–∫–∞ TapBot, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω'''

        Headers = {'authority': 'api-gw-tg.memefi.club', 'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'content-type': 'application/json', 'origin': 'https://tg-app.memefi.club', 'referer': 'https://tg-app.memefi.club/', 'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "YaBrowser";v="24.4", "Yowser";v="2.5"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA}
        Json = {'operationName': 'telegramGamePurchaseUpgrade', 'variables': {'upgradeType': 'TapBot'}, 'query': 'mutation telegramGamePurchaseUpgrade($upgradeType: UpgradeType!) {\n  telegramGamePurchaseUpgrade(type: $upgradeType) {\n    ...FragmentBossFightConfig\n    __typename\n  }\n}\n\nfragment FragmentBossFightConfig on TelegramGameConfigOutput {\n  _id\n  coinsAmount\n  currentEnergy\n  maxEnergy\n  weaponLevel\n  zonesCount\n  tapsReward\n  energyLimitLevel\n  energyRechargeLevel\n  tapBotLevel\n  currentBoss {\n    _id\n    level\n    currentHealth\n    maxHealth\n    __typename\n  }\n  freeBoosts {\n    _id\n    currentTurboAmount\n    maxTurboAmount\n    turboLastActivatedAt\n    turboAmountLastRechargeDate\n    currentRefillEnergyAmount\n    maxRefillEnergyAmount\n    refillEnergyLastActivatedAt\n    refillEnergyAmountLastRechargeDate\n    __typename\n  }\n  bonusLeaderDamageEndAt\n  bonusLeaderDamageStartAt\n  bonusLeaderDamageMultiplier\n  nonce\n  __typename\n}'}

        try:
            HPV = post(self.Domain, headers=Headers, json=Json, proxies=self.Proxy)

            try:
                HPV.json()['data']['telegramGamePurchaseUpgrade']['tapBotLevel']
                self.Logging('Success', self.Name, 'üü¢', 'TapBot –∫—É–ø–ª–µ–Ω!')
            except:
                Message = HPV.json()['errors'][0]['message']
                if Message == 'You don\'t have enough coins to purchase this upgrade':
                    self.Logging('Warning', self.Name, 'üü°', '–ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å TapBot! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!')
        except:
            self.Logging('Error', self.Name, 'üî¥', '–ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å TapBot!')



    def TapBot_Collection(self) -> None:
        '''–°–±–æ—Ä –º–æ–Ω–µ—Ç, —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é TapBota'''

        Headers = {'authority': 'api-gw-tg.memefi.club', 'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'content-type': 'application/json', 'origin': 'https://tg-app.memefi.club', 'referer': 'https://tg-app.memefi.club/', 'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "YaBrowser";v="24.4", "Yowser";v="2.5"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA}
        Json = {'operationName': 'TapbotClaim', 'variables': {}, 'query': 'fragment FragmentTapBotConfig on TelegramGameTapbotOutput {\n  damagePerSec\n  endsAt\n  id\n  isPurchased\n  startsAt\n  totalAttempts\n  usedAttempts\n  __typename\n}\n\nmutation TapbotClaim {\n  telegramGameTapbotClaimCoins {\n    ...FragmentTapBotConfig\n    __typename\n  }\n}'}

        try:
            post(self.Domain, headers=Headers, json=Json, proxies=self.Proxy).json()['data']['telegramGameTapbotClaimCoins']['damagePerSec']
            self.Logging('Success', self.Name, 'üü¢', '–ú–æ–Ω–µ—Ç—ã —Å TapBot —Å–æ–±—Ä–∞–Ω—ã!')
        except:
            self.Logging('Error', self.Name, 'üî¥', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã —Å TapBot!')



    def TapBot_Start(self) -> None:
        '''–ó–∞–ø—É—Å–∫ TapBota'''

        Headers = {'authority': 'api-gw-tg.memefi.club', 'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'content-type': 'application/json', 'origin': 'https://tg-app.memefi.club', 'referer': 'https://tg-app.memefi.club/', 'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "YaBrowser";v="24.4", "Yowser";v="2.5"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA}
        Json = {'operationName': 'TapbotStart', 'variables': {}, 'query': 'fragment FragmentTapBotConfig on TelegramGameTapbotOutput {\n  damagePerSec\n  endsAt\n  id\n  isPurchased\n  startsAt\n  totalAttempts\n  usedAttempts\n  __typename\n}\n\nmutation TapbotStart {\n  telegramGameTapbotStart {\n    ...FragmentTapBotConfig\n    __typename\n  }\n}'}

        try:
            post(self.Domain, headers=Headers, json=Json, proxies=self.Proxy).json()['data']['telegramGameTapbotStart']['damagePerSec']
            self.Logging('Success', self.Name, 'üü¢', 'TapBot –∑–∞–ø—É—â–µ–Ω!')
        except:
            self.Logging('Error', self.Name, 'üî¥', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å TapBot!')



    def Update_Boosts(self, UP_Type: Literal['Damage', 'EnergyCap', 'EnergyRechargeRate']) -> bool:
        '''–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É—Å—Ç–æ–≤'''

        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'content-type': 'application/json', 'origin': 'https://tg-app.memefi.club', 'priority': 'u=1, i', 'referer': 'https://tg-app.memefi.club/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA}
        Json = {'operationName': 'telegramGamePurchaseUpgrade', 'variables': {'upgradeType': UP_Type}, 'query': 'mutation telegramGamePurchaseUpgrade($upgradeType: UpgradeType!) {\n  telegramGamePurchaseUpgrade(type: $upgradeType) {\n    ...FragmentBossFightConfig\n    __typename\n  }\n}\n\nfragment FragmentBossFightConfig on TelegramGameConfigOutput {\n  _id\n  coinsAmount\n  currentEnergy\n  maxEnergy\n  weaponLevel\n  zonesCount\n  tapsReward\n  energyLimitLevel\n  energyRechargeLevel\n  tapBotLevel\n  currentBoss {\n    _id\n    level\n    currentHealth\n    maxHealth\n    __typename\n  }\n  freeBoosts {\n    _id\n    currentTurboAmount\n    maxTurboAmount\n    turboLastActivatedAt\n    turboAmountLastRechargeDate\n    currentRefillEnergyAmount\n    maxRefillEnergyAmount\n    refillEnergyLastActivatedAt\n    refillEnergyAmountLastRechargeDate\n    __typename\n  }\n  bonusLeaderDamageEndAt\n  bonusLeaderDamageStartAt\n  bonusLeaderDamageMultiplier\n  nonce\n  __typename\n}'}

        try:
            post(self.Domain, headers=Headers, json=Json, proxies=self.Proxy).json()['data']['telegramGamePurchaseUpgrade']
            return True
        except:
            return False



    def Update_LVL_Boss(self) -> bool:
        '''–ê–ø–≥—Ä–µ–π–¥ –±–æ—Å—Å–∞'''

        Headers = {'accept': '*/*', 'accept-language': 'ru,en;q=0.9,uz;q=0.8', 'authorization': f'Bearer {self.Token}', 'content-type': 'application/json', 'origin': 'https://tg-app.memefi.club', 'priority': 'u=1, i', 'referer': 'https://tg-app.memefi.club/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'user-agent': self.UA}
        Json = {'operationName': 'telegramGameSetNextBoss', 'variables': {}, 'query': 'mutation telegramGameSetNextBoss {\n  telegramGameSetNextBoss {\n    ...FragmentBossFightConfig\n    __typename\n  }\n}\n\nfragment FragmentBossFightConfig on TelegramGameConfigOutput {\n  _id\n  coinsAmount\n  currentEnergy\n  maxEnergy\n  weaponLevel\n  zonesCount\n  tapsReward\n  energyLimitLevel\n  energyRechargeLevel\n  tapBotLevel\n  currentBoss {\n    _id\n    level\n    currentHealth\n    maxHealth\n    __typename\n  }\n  freeBoosts {\n    _id\n    currentTurboAmount\n    maxTurboAmount\n    turboLastActivatedAt\n    turboAmountLastRechargeDate\n    currentRefillEnergyAmount\n    maxRefillEnergyAmount\n    refillEnergyLastActivatedAt\n    refillEnergyAmountLastRechargeDate\n    __typename\n  }\n  bonusLeaderDamageEndAt\n  bonusLeaderDamageStartAt\n  bonusLeaderDamageMultiplier\n  nonce\n  __typename\n}'}

        try:
            post(self.Domain, headers=Headers, json=Json, proxies=self.Proxy).json()['data']
            return True
        except:
            return False



    def Run(self) -> None:
        '''–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞'''

        while True:
            try:
                if self.Token: # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
                    INFO = self.Get_Info()


                    Bot = INFO['Bot'] # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–ª–∏—á–∏–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –±–æ—Ç–∞
                    Balance = INFO['Balance'] # –ë–∞–ª–∞–Ω—Å
                    Boss = INFO['Boss_LVL'] # –£—Ä–æ–≤–µ–Ω—å –±–æ—Å—Å–∞
                    Boss_Health = INFO['Boss_Health'] # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Å—Å–∞
                    Turbo, Recharge = INFO['Turbo'], INFO['Recharge'] # –î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª-–≤–æ –±—É—Å—Ç–æ–≤


                    Tap_LVL = INFO['Tap_LVL'] # –£—Ä–æ–≤–µ–Ω—å —Ç–∞–ø–∞
                    Max_Energy_LVL = INFO['Max_Energy_LVL'] # –£—Ä–æ–≤–µ–Ω—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
                    Recovery_Rate_LVL = INFO['Recovery_Rate_LVL'] # –£—Ä–æ–≤–µ–Ω—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è


                    self.Logging('Success', self.Name, 'üí∞', f'–ë–∞–ª–∞–Ω—Å: {Balance} /// –£—Ä–æ–≤–µ–Ω—å –±–æ—Å—Å–∞: {Boss}')
                    Changes = 0 # –°–∫–æ–ª—å–∫–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π

                    # –£–ª—É—á—à–µ–Ω–∏–µ `Damage` –±—É—Å—Ç–∞ (—É—Ä–æ–Ω –∑–∞ –æ–¥–∏–Ω —Ç–∞–ø)
                    if Tap_LVL < MAX_DAMAGE_LVL:
                        if self.Update_Boosts('Damage'):
                            self.Logging('Success', self.Name, '‚ö°Ô∏è', '–ë—É—Å—Ç `Damage` —É–ª—É—á—à–µ–Ω!')
                            Changes += 1 # +1 –µ—Å–ª–∏ –±—É—Å—Ç —É–ª—É—á—à–∏—Ç—Å—è
                            sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

                    # –£–ª—É—á—à–µ–Ω–∏–µ `EnergyCap` –±—É—Å—Ç–∞ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ë–º–∫–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏)
                    if Max_Energy_LVL < MAX_ENERGY_CAP_LVL:
                        if self.Update_Boosts('EnergyCap'):
                            self.Logging('Success', self.Name, '‚ö°Ô∏è', '–ë—É—Å—Ç `EnergyCap` —É–ª—É—á—à–µ–Ω!')
                            Changes += 1 # +1 –µ—Å–ª–∏ –±—É—Å—Ç —É–ª—É—á—à–∏—Ç—Å—è
                            sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

                    # –£–ª—É—á—à–µ–Ω–∏–µ `EnergyRechargeRate` –±—É—Å—Ç–∞ (—Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏)
                    if Recovery_Rate_LVL < MAX_RECHARGING_SPEED_LVL:
                        if self.Update_Boosts('EnergyRechargeRate'):
                            self.Logging('Success', self.Name, '‚ö°Ô∏è', '–ë—É—Å—Ç `EnergyRechargeRate` —É–ª—É—á—à–µ–Ω!')
                            Changes += 1 # +1 –µ—Å–ª–∏ –±—É—Å—Ç —É–ª—É—á—à–∏—Ç—Å—è
                            sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ


                    # –ü–æ–ø—ã—Ç–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Å—Å–∞
                    if Boss_Health <= 0:
                        if self.Update_LVL_Boss():
                            self.Logging('Success', self.Name, 'üëæ', '–¢–µ–∫—É—â–∏–π –±–æ—Å—Å –ø–æ–±–µ–∂–¥—ë–Ω! –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –±–æ—Å—Å!')
                            Changes += 1 # +1 –µ—Å–ª–∏ –±—É—Å—Ç —É–ª—É—á—à–∏—Ç—Å—è
                            sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ


                    # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∞–ø–≥—Ä–µ–π–¥ –±—É—Å—Ç–æ–≤ –∏/–∏–ª–∏ –∞–ø–≥—Ä–µ–π–¥ –±–æ—Å—Å–∞
                    if Changes:
                        _INFO = self.Get_Info()
                        _Balance, _Boss = _INFO['Balance'], _INFO['Boss_LVL'] # –ë–∞–ª–∞–Ω—Å –∏ –£—Ä–æ–≤–µ–Ω—å –±–æ—Å—Å–∞
                        self.Logging('Success', self.Name, 'üí∞', f'–ë–∞–ª–∞–Ω—Å: {_Balance} /// –£—Ä–æ–≤–µ–Ω—å –±–æ—Å—Å–∞: {_Boss}')


                    # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å TapBot
                    if Bot: # –ï—Å–ª–∏ TapBot —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω - –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–±–æ—Ä –º–æ–Ω–µ—Ç –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
                        Get_Bots = self.Get_Bots() # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ—Ç–æ–≤
                        for _ in range(Get_Bots):
                            sleep(randint(33, 103)) # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ
                            self.TapBot_Collection() # –°–±–æ—Ä –º–æ–Ω–µ—Ç, —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é TapBota

                            sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                            self.TapBot_Start() # –ó–∞–ø—É—Å–∫ TapBota

                            Waiting = randint(11_000, 14_000) # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
                            Waiting_STR = (datetime.now() + timedelta(seconds=Waiting)).strftime('%Y-%m-%d %H:%M:%S') # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ

                            self.Logging('Warning', self.Name, '‚è≥', f'–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –æ–∫–æ–Ω—á–µ–Ω–æ, —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {Waiting_STR}!')

                            sleep(Waiting) # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 3 –¥–æ 4 —á–∞—Å–æ–≤
                            self.ReAuthentication() # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞

                        sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                        self.TapBot_Collection() # –°–±–æ—Ä –º–æ–Ω–µ—Ç, —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é TapBota

                    else: # –ï—Å–ª–∏ TapBot –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –µ–≥–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ
                        self.Buy_TapBot()


                    Waiting = randint(18_000, 22_000) # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
                    Waiting_STR = (datetime.now() + timedelta(seconds=Waiting)).strftime('%Y-%m-%d %H:%M:%S') # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ

                    self.Logging('Success', self.Name, 'üí∞', f'–ë–∞–ª–∞–Ω—Å: {self.Get_Info()["Balance"]} /// –£—Ä–æ–≤–µ–Ω—å –±–æ—Å—Å–∞: {self.Get_Info()["Boss_LVL"]}')
                    self.Logging('Warning', self.Name, '‚è≥', f'–°–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ä—Ç —Å–±–æ—Ä–∞ –º–æ–Ω–µ—Ç: {Waiting_STR}!')

                    sleep(Waiting) # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 5 –¥–æ 6 —á–∞—Å–æ–≤
                    self.ReAuthentication() # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞

                else: # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É—Å–ø–µ—à–Ω–∞
                    sleep(randint(33, 66)) # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 33 –¥–æ 66 —Å–µ–∫—É–Ω–¥
                    self.ReAuthentication() # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
            except:
                pass







if __name__ == '__main__':
    sys('cls') if s_name() == 'Windows' else sys('clear')

    Console_Lock = Lock()
    Proxy = HPV_Proxy_Checker()

    def Start_Thread(Account, URL, Proxy = None):
        MemeFi = HPV_MemeFi(Account, URL, Proxy)
        MemeFi.Run()

    if Proxy:
        DIVIDER = Fore.BLACK + ' | '
        Time = Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'
        Text = Fore.GREEN + f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ –æ–∫–æ–Ω—á–µ–Ω–∞! –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã–µ: {len(Proxy)}'
        print(Time + DIVIDER + 'üåê' + DIVIDER + Text)
        sleep(5)

    try:
        for Account, URL in HPV_Get_Accounts().items():
            if Proxy:
                Proxy = cycle(Proxy)
                Thread(target=Start_Thread, args=(Account, URL, next(Proxy),)).start()
            else:
                Thread(target=Start_Thread, args=(Account, URL,)).start()
    except:
        print(Fore.RED + '\n\t–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è `HPV_Account.json`, —Å—Å—ã–ª–∫–∏ —É–∫–∞–∑–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')


